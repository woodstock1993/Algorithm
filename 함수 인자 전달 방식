Call by value(값에 의한 호출) 
  이란 : 값이 지정된 변수를 인자로 넘기는 것이 아니라 변수에 할당된 값만을 복사해서 함수의 인자로 넘기는 방식
  장점 : 복사 처리가 되기 때문에 원래의 값은 영향을 받지 않는다. 할당하려는 대상변수의 주소값이 아닌 변수가 갖는 값의 복사 값이기 때문이다  
  단점 : 복사가 되기 때문에 메모리량이 늘어난다.
  
Call by reference(참조에 의한 호출)  
  이란 : 인자로 받은 변수가 가리키는 주소의 값을 전달한다.
  장점 : 복사하지 않고 직접 참조를 하기에 빠르다.
  단점 : 직접 참조를 하기에 원래 값이 영향을 받는다. 
  
Call by object reference in Python
  Python에서 모든 것은 객체이고 각 객체는 단 하나의 인스턴스를 갖는다.
  변수는 메모리 공간에 값을 직접 지정하지 않으며 해당 인스턴스의 값을 가르킨다 
  변수가 가지는 값이 변경되더라도 메모리에 저장된 값이 변경되는 것이 아니라 가르키고 있는 인스턴스가 변경된다
  
  immutable한 포맷의 객체는 변경할 수 없다 
  mutable한 포맷의 객체는 변경할 수 있다 

1. 단순 객체복제
a = [1, 2, 3, 4]
b = a     # shallow copy
print(b)    # [1, 2, 3, 4]
b[2] = 100   # b의 item 변경
print(b)    # [1, 2, 100, 4]
print(a)    # [1, 2, 100, 4], a의 item도 수정됨!!
* mutable한 객체일 때만 해당함

불변의 객체에서 참조변수를 수정한다는 것은 변수가 가리키는 객체의 주소 값이 바뀌는 것이 아니라 변수에 새로운 객체가 할당되는 것을 의미한다 

2. 얕은복사
  복합객체(껍데기)만 복사(복합 객체의 가장 바깥에 있는 객체만 새로운 주소값을 갖는다), 그 내용은 동일한 객체(복합 객체 내에 있는 객체의 id는 동일하다)

3. 깊은복사 
  복합객체의 주소 뿐만 아니라 복합객체내에 있는 객체들의 고유 주소까지 모두 복사한다 
